# -*- coding: utf-8 -*-
"""electives-lite-salma.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zWz0fv57s_6srepfApt0Wf9xOQ1g0IvG

Hai girls! Dalam Notebook ini, kita akan memprediksi lagu populer dari kumpulan data "TikTok Musics". Ayo kita mulai!

## 1. Memasukkan Data

Pertama-tama kita harus memasukkan datanya ke notebook ini.

* Pastikan kalian telah mengunduh file dataset: tiktok-clean.csv
* Masukkan dataset di dalam "Drive Saya" / "My Drive" di google drive kalian
* Lanjutkan ke sel berikutnya! Klik `Shift + enter` untuk menjalankan sel
* Buka link, terima persyaratan, dan salin authorization ke kotak dan tekan enter
"""

# from google.colab import drive
# drive.mount('/content/drive', force_remount=True)

# Menggunakan library pandas
import pandas as pd

# Membaca dataset yang telah diimport
df = pd.read_csv("tiktok-clean.csv")
df.head()

# Melihat ukuran/bentuk data 
print(df.shape)

# Melihat karakteristik tiap kolom (tipe data, jumlah data hilang, nama kolom)
print(df.info())

"""# Exploratory Data Analysis"""

# Memperlihatkan deskripsi statistik dari data
df.describe()

# Menampilkan data dalam bentuk histogram
df.hist(column='popularity', bins=100)

# Melihat data 10 lagu paling populer
df.sort_values('popularity', ascending=False).head(15)

# Melihat data 5 lagu paling tidak populer
df.sort_values('popularity', ascending=True).head(10)

# Menampilkan data dalam bentuk histogram
df.hist(column='duration_mins', bins=100)

import matplotlib.pyplot as plt

# Melihat korelasi antara loudness dan energy
plt.figure(figsize=(8, 6))
plt.scatter(df['loudness'], df['energy'])
# Memberikan label pada plot x dan y 
plt.xlabel("Loudness")
plt.ylabel("Energy")
plt.title("Loudness and Energy", size=16)

# Import seaborn untuk visualisasi korelasi
import seaborn as sns

plt.figure(figsize=(20,16))
# Membuat korelasi dalam heatmap
heatmap = sns.heatmap(df.corr(), annot=True)

"""# Linear Regression & Model Evaluation"""

# Import library-library
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

"""## Model 1: energy, liveness dan tempo"""

# Mendefinisikan kolom yang akan digunakan sebagai model features
x = df[['energy','liveness','tempo']]
# Mendefinisikan kolom yang akan digunakan sebagai target variabel
y = df['popularity']

# Membagi dataset menjadi data training dan testing
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3)

print("X_train : ", x_train.shape)
print("X_test : ", x_test.shape)
print("Y_train : ", y_train.shape)
print("Y_test : ", y_test.shape)

# Membuat model linear regression
lm = LinearRegression()
# Melakukan training pada model menggunakan training dataset
lm.fit(x_train,y_train)

# Menggunakan model untuk memprediksi popularitas menggunakan testing dataset
predictions = lm.predict(x_test)

# Membandingkan nilai prediksi model dengan nilai asli
df_test_set = x_test
df_test_set = df_test_set.join(y_test)
df_test_set['PREDICTED POPULARITY'] = predictions
df_test_set.head(5)

# Memvisualisikan dalam bentuk scatter plot
plt.figure(figsize=(8, 6))
plt.scatter(y_test, predictions)
plt.title("Results")
plt.xlabel("Actual Popularity Scores")
plt.ylabel("Predicted Popularity Scores")

# Import library numpy untuk menghitung nilai evaluasi
import numpy as np

# Melakukan evaluasi dengan 3 metrics berbeda
print('MAE:', metrics.mean_absolute_error(y_test, predictions))
print('MSE:', metrics.mean_squared_error(y_test, predictions))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))

"""## Model 2: danceability, loudness dan duration"""

# Mendefinisikan kolom yang akan digunakan sebagai model features
## -- menghapus target variable dan kolom yang kurang relevan
x1 = df[['danceability','loudness','duration']]
# Mendefinisikan kolom yang akan digunakan sebagai target variabel
y1 = df['popularity']

# Membagi dataset menjadi data training dan testing
x1_train, x1_test, y1_train, y1_test = train_test_split(x1, y1, test_size=0.3)

print("X_train : ", x1_train.shape)
print("X_test : ", x1_test.shape)
print("Y_train : ", y1_train.shape)
print("Y_test : ", y1_test.shape)

# Membuat model linear regression
lm1 = LinearRegression()
# Melakukan training pada model menggunakan training dataset
lm1.fit(x1_train,y1_train)

predictions1 = lm1.predict(x1_test)

df_test_set = x1_test
df_test_set = df_test_set.join(y1_test)
df_test_set['PREDICTED POPULARITY'] = predictions1
df_test_set.head(5)

plt.figure(figsize=(8, 6))
plt.scatter(y1_test, predictions1)
plt.title("Results")
plt.xlabel("Actual Popularity Scores")
plt.ylabel("Predicted Popularity Scores")

plt.show()

import numpy as np
print('MAE:', metrics.mean_absolute_error(y1_test, predictions1))
print('MSE:', metrics.mean_squared_error(y1_test, predictions1))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y1_test, predictions1)))

